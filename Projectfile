# django_zero (see github.com/python-medikit)

from medikit import listen, require

NAME = 'django_zero'

git = require('git')
make = require('make')
nodejs = require('nodejs')
pytest = require('pytest')
python = require('python')
sphinx = require('sphinx')
yapf = require('yapf')

python.setup(
    name=NAME,
    description='Zero-configuration django projects.',
    license='Apache License, Version 2.0',
    url='',
    download_url='',
    author='Romain Dorgueil',
    author_email='romain@dorgueil.net',
    entry_points={
        'console_scripts': [
            'django-zero = django_zero.commands:main',
        ],
    }
)

python.add_requirements(
    'brotli ~=1.0',
    'django ~=2.0',
    'django-allauth ~=0.34',
    'django-includes ~=0.2',
    'jinja2 ~=2.10',
    'mondrian ~=0.6',
    'whitenoise ~=3.3',

    # Celery
    celery=[
        'celery ~=4.1',
        'django_celery_beat ~=1.1.1',
        'django_celery_results ~=1.0.1',
    ],

    # Channels
    channels=[
        'channels ~=2.0,>=2.0.2',
    ],

    # Dev-only tooling
    dev=[
        'cookiecutter ~=1.6',
        'django-extensions ~=1.9',
        'django_debug_toolbar ~=1.9',
        'honcho ~=1.0',
        'medikit ~=0.5',
        'werkzeug ~=0.14',
    ],

    # Production tools
    prod=[
        'gunicorn ~=19.7.1',
    ]
)

(nodejs
    .setup(base_dir=NAME)
    .add_dependencies(
    {
        'assets-webpack-plugin': '^3.5.1',
        'babel-core': '^6.26.0',
        'babel-loader': '^7.1.2',
        'babel-preset-env': '^1.6.1',
        'bootstrap': '^4.0.0',
        'css-loader': '^0.28.9',
        'extract-text-webpack-plugin': '^3.0.2',
        'jquery': '1.9.1 - 3',
        'node-sass': '^4.0.0',
        'popper.js': '^1.12.9',
        'postcss-loader': '^2.0.10',
        'precss': '^3.1.0',
        'sass-loader': '^6.0.6',
        'style-loader': '^0.19.1',
        'webpack': '^3.10.0'
    }
))


@listen(make.on_generate)
def on_make_generate(event):
    event.makefile.add_target('testrun', '''
        $(eval TMPDIR := $(shell mktemp -d))
        (cd $(TMPDIR); $(PYTHON) -m virtualenv -p $(PYTHON) env)
        $(TMPDIR)/env/bin/pip install .[dev]
        $(eval ZERO := $(TMPDIR)/env/bin/django-zero)
        (cd $(TMPDIR); $(ZERO) install)
        (cd $(TMPDIR); $(ZERO) create --no-input project acme)
        (cd $(TMPDIR)/acme; $(YARN) install)
        (cd $(TMPDIR)/acme; $(ZERO) manage migrate)
        trap 'rm -rf "$(TMPDIR)"' EXIT; (cd $(TMPDIR)/acme; $(ZERO) start)
    ''', phony=True)

# vim: ft=python:
